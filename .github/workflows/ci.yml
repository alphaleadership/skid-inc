name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: |
          if [ -f "package.json" ] && grep -q '"lint"' package.json; then
            npm run lint
          else
            echo "No linting script found, skipping..."
          fi

      - name: Run tests
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            npm test
          else
            echo "No test script found, skipping..."
          fi

      - name: Validate build configuration
        run: |
          echo "Validating package.json build configuration..."
          node -e "
            const pkg = require('./package.json');
            if (!pkg.build) {
              console.error('Missing build configuration in package.json');
              process.exit(1);
            }
            if (!pkg.main) {
              console.error('Missing main field in package.json');
              process.exit(1);
            }
            console.log('✅ Build configuration is valid');
          "

  build-test:
    name: Build Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python (for native modules)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon0 libgtk-3-dev libxss1

      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Cache Electron Builder
        uses: actions/cache@v3
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-

      - name: Install dependencies
        run: npm ci

      - name: Run pre-build
        run: npm run prebuild

      - name: Build for current platform (directory only)
        env:
          NODE_ENV: development
          SKIP_SIGNING: true
        run: npm run build:dir

      - name: Verify build output
        run: |
          echo "Build output:"
          ls -la dist/ || echo "No dist directory found"
          
          # Check if main executable exists
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ -d "dist/win-unpacked" ]; then
              echo "✅ Windows build successful"
              ls -la dist/win-unpacked/
            else
              echo "❌ Windows build failed - no win-unpacked directory"
              exit 1
            fi
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            if [ -d "dist/mac" ] || [ -d "dist/mac-universal" ]; then
              echo "✅ macOS build successful"
              ls -la dist/mac* || true
            else
              echo "❌ macOS build failed - no mac directory"
              exit 1
            fi
          else
            if [ -d "dist/linux-unpacked" ]; then
              echo "✅ Linux build successful"
              ls -la dist/linux-unpacked/
            else
              echo "❌ Linux build failed - no linux-unpacked directory"
              exit 1
            fi
          fi

      - name: Test application startup (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install xvfb for headless testing
          sudo apt-get install -y xvfb
          
          # Test if the app can start (headless)
          timeout 30s xvfb-run -a dist/linux-unpacked/skid-inc --version || echo "App startup test completed"

      - name: Upload build artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: build-failure-${{ matrix.os }}
          path: |
            dist/
            *.log
            build-errors/
          retention-days: 3

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level=moderate || echo "Security audit completed with warnings"

      - name: Check for known vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          if command -v npx >/dev/null 2>&1; then
            npx audit-ci --moderate || echo "Vulnerability check completed"
          else
            echo "audit-ci not available, skipping detailed vulnerability check"
          fi

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: |
          echo "Analyzing application size..."
          
          # Check main files size
          if [ -f "src/main.js" ]; then
            echo "Main process size:"
            wc -c src/main.js
          fi
          
          if [ -f "index.html" ]; then
            echo "Renderer size:"
            wc -c index.html
          fi
          
          # Check total source size
          echo "Total source size:"
          find src app -type f -name "*.js" -o -name "*.html" -o -name "*.css" | xargs wc -c | tail -1
          
          # Check node_modules size (production only)
          echo "Production dependencies size:"
          npm ls --prod --parseable | xargs du -sc 2>/dev/null | tail -1 || echo "Could not calculate dependencies size"

      - name: Memory usage estimation
        run: |
          echo "Estimating memory usage..."
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            function getDirectorySize(dir) {
              let size = 0;
              try {
                const files = fs.readdirSync(dir);
                for (const file of files) {
                  const filePath = path.join(dir, file);
                  const stats = fs.statSync(filePath);
                  if (stats.isDirectory()) {
                    size += getDirectorySize(filePath);
                  } else {
                    size += stats.size;
                  }
                }
              } catch (e) {
                // Ignore errors
              }
              return size;
            }
            
            const srcSize = getDirectorySize('src') + getDirectorySize('app');
            const estimatedMemory = Math.round(srcSize / 1024 / 1024 * 3); // Rough estimation
            
            console.log(\`Estimated runtime memory usage: ~\${estimatedMemory}MB\`);
            
            if (estimatedMemory > 200) {
              console.log('⚠️  High memory usage detected');
            } else {
              console.log('✅ Memory usage looks reasonable');
            }
          "

  status-check:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [test, build-test, security-scan, performance-test]
    if: always()
    
    steps:
      - name: Check overall status
        run: |
          echo "CI Results Summary:"
          echo "=================="
          
          if [ "${{ needs.test.result }}" = "success" ]; then
            echo "✅ Tests: PASSED"
          else
            echo "❌ Tests: FAILED"
          fi
          
          if [ "${{ needs.build-test.result }}" = "success" ]; then
            echo "✅ Build Tests: PASSED"
          else
            echo "❌ Build Tests: FAILED"
          fi
          
          if [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "✅ Security Scan: PASSED"
          else
            echo "⚠️  Security Scan: COMPLETED WITH WARNINGS"
          fi
          
          if [ "${{ needs.performance-test.result }}" = "success" ]; then
            echo "✅ Performance Test: PASSED"
          else
            echo "⚠️  Performance Test: COMPLETED WITH WARNINGS"
          fi
          
          # Fail if critical jobs failed
          if [ "${{ needs.test.result }}" != "success" ] || [ "${{ needs.build-test.result }}" != "success" ]; then
            echo ""
            echo "❌ CI FAILED - Critical jobs failed"
            exit 1
          else
            echo ""
            echo "✅ CI PASSED - All critical jobs succeeded"
          fi