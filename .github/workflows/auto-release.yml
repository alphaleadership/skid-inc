name: Auto Release

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type de release'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      prerelease:
        description: 'Pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.version_check.outputs.version }}
      should_release: ${{ steps.version_check.outputs.should_release }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check version change
        id: version_check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual release triggered"
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "should_release=true" >> $GITHUB_OUTPUT
            
            # Get current version and calculate new version
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "Current version: $CURRENT_VERSION"
            
            # For manual dispatch, we'll use the current version
            echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            # Check if package.json version changed
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            
            # Get previous version from git
            git checkout HEAD~1 -- package.json 2>/dev/null || echo "No previous version found"
            PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
            
            # Restore current package.json
            git checkout HEAD -- package.json
            
            echo "Previous version: $PREVIOUS_VERSION"
            echo "Current version: $CURRENT_VERSION"
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "Version unchanged"
              echo "changed=false" >> $GITHUB_OUTPUT
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Create and push tag
        run: |
          VERSION="${{ needs.check-version.outputs.new_version }}"
          echo "Creating tag: $VERSION"
          
          # Check if tag already exists
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists"
            exit 0
          fi
          
          # Create tag
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
          
          echo "Tag $VERSION created and pushed"

  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          echo "Bumping version: $RELEASE_TYPE"
          
          # Bump version in package.json
          npm version $RELEASE_TYPE --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "New version: $NEW_VERSION"
          
          # Commit changes
          git add package.json
          git commit -m "chore: bump version to $NEW_VERSION"
          git push origin main
          
          # Create tag
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

  trigger-release:
    name: Trigger Release Build
    runs-on: ubuntu-latest
    needs: [check-version, create-tag]
    if: needs.check-version.outputs.should_release == 'true'
    
    steps:
      - name: Trigger release workflow
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.check-version.outputs.new_version }}';
            const isPrerelease = '${{ github.event.inputs.prerelease }}' === 'true';
            
            console.log(`Triggering release workflow for version: ${version}`);
            
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-and-release.yml',
              ref: 'main',
              inputs: {
                version: version,
                prerelease: isPrerelease.toString()
              }
            });
            
            console.log('Release workflow triggered successfully');

  notify:
    name: Notify Release Status
    runs-on: ubuntu-latest
    needs: [check-version, create-tag, trigger-release]
    if: always() && needs.check-version.outputs.should_release == 'true'
    
    steps:
      - name: Notify success
        if: needs.create-tag.result == 'success' && needs.trigger-release.result == 'success'
        run: |
          echo "✅ Auto-release process completed successfully!"
          echo "Version: ${{ needs.check-version.outputs.new_version }}"
          echo "Release build has been triggered."

      - name: Notify failure
        if: needs.create-tag.result == 'failure' || needs.trigger-release.result == 'failure'
        run: |
          echo "❌ Auto-release process failed!"
          echo "Check the workflow logs for details."
          exit 1

      - name: Notify no release
        if: needs.check-version.outputs.should_release == 'false'
        run: |
          echo "ℹ️  No release needed - version unchanged"