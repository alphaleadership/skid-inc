name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
            arch: x64
            artifact: win-x64
      
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact: linux-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python (for native modules)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon0 libgtk-3-dev libxss1

      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ runner.os }}-electron-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Cache Electron Builder
        uses: actions/cache@v3
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-

      - name: Install dependencies
        run: npm ci

      - name: Setup code signing (Windows)
        if: matrix.os == 'windows-latest' && env.WIN_CSC_LINK != ''
        env:
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        run: |
          echo "Code signing configured for Windows"

      - name: Setup code signing (macOS)
        if: matrix.os == 'macos-latest' && env.CSC_LINK != ''
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Code signing configured for macOS"

      - name: Build application
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUILD_PLATFORMS: ${{ matrix.platform }}
        run: |
          npm run build:automated

      - name: List build artifacts
        run: |
          echo "Build artifacts:"
          ls -la dist/ || echo "No dist directory found"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            dist/*.exe
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/build-report.json
            dist/SHA256SUMS
          retention-days: 30

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.artifact }}
          path: |
            dist/*.log
            build-errors/*.json
          retention-days: 7

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" \) -exec cp {} release-assets/ \;
          
          # Create combined checksum file
          cd release-assets
          if command -v sha256sum >/dev/null 2>&1; then
            sha256sum * > SHA256SUMS
          else
            shasum -a 256 * > SHA256SUMS
          fi
          cd ..
          
          echo "Release assets:"
          ls -la release-assets/

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGELOG="- Version initiale"
          fi
          
          # Create release notes
          cat > release-notes.md << EOF
          # Release $VERSION
          
          ## Nouveautés et Corrections
          
          $CHANGELOG
          
          ## Téléchargements
          
          ### Windows
          - **Skid-Inc-Setup-*.exe** - Installateur Windows (recommandé)
          - **Skid-Inc-*-win.exe** - Version portable Windows
          
          ### macOS
          - **Skid-Inc-*.dmg** - Installateur macOS
          - **Skid-Inc-*-mac.zip** - Archive macOS
          
          ### Linux
          - **Skid-Inc-*.AppImage** - Application universelle Linux
          - **skid-inc_*_amd64.deb** - Package Debian/Ubuntu
          - **skid-inc-*.x86_64.rpm** - Package Red Hat/Fedora
          
          ## Installation
          
          Consultez le [guide d'installation](https://github.com/TotomInc/skid-inc/blob/main/INSTALLATION.md) pour des instructions détaillées.
          
          ## Configuration Système
          
          - **Windows**: Windows 10+ (64-bit)
          - **macOS**: macOS 10.14+ (Intel/Apple Silicon)
          - **Linux**: Distributions modernes (64-bit)
          
          ## Vérification d'Intégrité
          
          Utilisez le fichier \`SHA256SUMS\` pour vérifier l'intégrité des téléchargements:
          
          \`\`\`bash
          sha256sum -c SHA256SUMS
          \`\`\`
          
          ---
          
          *Construit automatiquement le $(date -u +"%Y-%m-%d à %H:%M UTC")*
          EOF
          
          echo "Release notes generated"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Skid-Inc ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          files: |
            release-assets/*
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          draft: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release info
        run: |
          echo "Release ${{ steps.version.outputs.version }} created successfully"
          echo "Assets uploaded:"
          ls -la release-assets/

  notify:
    name: Notify Build Status
    needs: [build, create-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify success
        if: needs.build.result == 'success' && needs.create-release.result == 'success'
        run: |
          echo "✅ Build and release completed successfully!"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/latest"

      - name: Notify failure
        if: needs.build.result == 'failure' || needs.create-release.result == 'failure'
        run: |
          echo "❌ Build or release failed!"
          echo "Check the workflow logs for details."
          exit 1